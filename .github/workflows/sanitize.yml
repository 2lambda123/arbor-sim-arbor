name: Sanitize

on:
  pull_request:
    branches: [ master ]

jobs:
  build:
    name: "Sanitize"
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        name:      ["Sanitize"]
        sanitizer: ["address", "undefined", "thread"]
        simd:      ["ON", "OFF"]
    env:
        CC:           clang-14
        CXX:          clang++-14
        ASAN_OPTIONS: detect_leaks=1
    steps:
      - name: Get build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build ccache
      - name: Set up cmake
        uses: jwlawson/actions-setup-cmake@v1.13
        with:
          cmake-version: 3.19.x
      - name: Clone w/ submodules
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Update pip
        run: python -m pip install --upgrade pip
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: sanitize-${{ env.CXX }}-${{ matrix.sanitizer }}
      - name: Build arbor
        run: |
          export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
          mkdir build
          cd build
          export SAN="-fsanitize=${{ matrix.sanitizer }} -fno-omit-frame-pointer"
          cmake .. -GNinja -DCMAKE_BUILD_TYPE=debug -DCMAKE_CXX_FLAGS="$SAN" -DCMAKE_C_FLAGS="$SAN" -DCMAKE_EXE_LINKER_FLAGS="$SAN" -DCMAKE_MODULE_LINKER_FLAGS="$SAN" -DCMAKE_CXX_COMPILER=$CXX -DCMAKE_C_COMPILER=$CC -DARB_VECTORIZE=${{ matrix.simd }} -DARB_WITH_MPI=OFF -DARB_USE_BUNDLED_LIBS=ON -DARB_WITH_PYTHON=ON -DPython3_EXECUTABLE=`which python` -DARB_ARCH=x86-64-v3
          ninja -j4 -v tests examples pyarb
          cd -
      - name: Run unit tests
        run: |
          build/bin/unit --gtest_filter=-*DeathTest
          build/bin/unit-modcc
      - name: Run examples
        run: scripts/run_cpp_examples.sh
