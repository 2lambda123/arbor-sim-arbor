# Demonstration of the python wrapper for Arbor.

import pyarb as arb

# A recipe, that describes the cells and network of a model, can be defined
# in python by implementing the pyarb.recipe interface.
class rss_recipe(arb.recipe):

    # The num_cells method that returns the total number of cells in the model
    # must be implemented.
    def num_cells(self):
        return 4 # there are 4 cells in this model.

    # The cell_description method returns a 
    def cell_description(self, gid):
        cell = arb.rss_cell()
        cell.start_time = 0
        cell.period = 2
        cell.stop_time = 10
        return cell

    # The kind method returns the type of cell with gid.
    # Note: this must agree with the type returned by cell_description.
    def kind(self, gid):
        return arb.cell_kind.regular_spike

# Instantiate one of our simple recipes
recipe = rss_recipe()

# get_node_info returns a description of the hardware resources available
# to this process.
node = arb.get_node_info()
print(node)

# Perform load balancing. The output will be a domain_decomposition, which
# describes which cells are to be instantiated on the local domain.
decomp = arb.partition_load_balance(recipe, node)
print(decomp)
print(decomp.gid_domain(0))

# Instantiate a model for the recipe.
model = arb.model(recipe, decomp)
# Create a spike recorder, which can be queried later for all spikes that
# were generated by the model.
recorder = arb.make_spike_recorder(model)
# Run the model for 100ms.
model.run(100, 0.01)

# Output the spikes to stdout.
print('There were ', len(recorder.spikes), ' spikes:')
print(recorder.spikes)
