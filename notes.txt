backend:
* moved spike detection into the backend.
* each backend provides a threshold_watcher type that is initialized
  with a reference to the field that it is to watch, along with indexes
  and thresholds for each variable in the field that is being watched.
* the multicore back end is a cut and paste of the original code
* the gpu back end calls a kernel, which uses a new data structure
  called a gpu_stack that lets threads in a kernel conditionally
  push back into a flat array.

miniapp:
* The miniapp runs a single-step dummy run of model before starting the
  profiler. Make this only run if the profiler is on.
* Initialize the spike output callback functions _after_ the dummy run
  so that spikes from the dummy step are not output.

cell_group:
* the cell_group no longer explicitly performs spike checking, which has
  been handed off to the backends. This simplifies the cell_group code.

fvm_multicell:
* fixed a bug in the spike detection code when there are more than one
  cell in a group. Before a new threshold watch of one cell was initialized
  for each cell, now we initialize one watch for the whole cell group.
* some of the spike detection code has moved from cell_group into the
  lowered cell, as part of moving it into the back end.

memory:
* added a new allocator for CUDA managed memory
* added a managed_ptr and make_managed_ptr, which are managed memory equivalents
  to std::unique_ptr and std::make_unique_ptr.

tests:
* improved host-side spike detection unit tests
* added device-side spike detection unit tests
* added unit test for gpu_stack

