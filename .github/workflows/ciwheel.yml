name: Arbor on Wheels

on:
  push:
    branches: [ master, ciwheel ]
    tags:
      - v*

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.config.os }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name:  "Linux Max GCC",
            os:    "ubuntu-20.04",
            cc:    "gcc-10",
            cxx:   "g++-10",
            py:    "3.9",
            cmake: "3.19.x",
            mpi:   "ON",
            simd:  "OFF"
          }
        - {
            name:  "MacOS Max",
            os:    "macos-10.15", # TODO: 11.0 is still private preview, fix later.
            cc:    "clang",
            cxx:   "clang++",
            py:    "3.9",
            cmake: "3.19.x",
            mpi:   "ON",
            simd:  "OFF"
          }

    env:
        CC:         ${{ matrix.config.cc }}
        CXX:        ${{ matrix.config.cxx }}
        # This is a workaround for the unfortunate interaction of MacOS and OpenMPI 4
        # See https://github.com/open-mpi/ompi/issues/6518
        OMPI_MCA_btl: "self,tcp"

    steps:
      ## system setup
      - name: Set up cmake
        uses: jwlawson/actions-setup-cmake@v1.7
        with:
          cmake-version: ${{ matrix.config.cmake }}
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.config.py }}
      - name: OpenMPI cache
        uses: actions/cache@v2
        id:   cache-ompi
        with:
          path: ~/openmpi-4.0.2
          key:  ${{ matrix.config.os }}-openmpi-4.0.2-${{ matrix.config.cxx }}
      - name: Build OpenMPI
        if: ${{ steps.cache-ompi.outputs.cache-hit != 'true' }}
        run: |
           echo cache-hit='${{ steps.cache-ompi.outputs.cache-hit }}'
           cd ~
           wget https://download.open-mpi.org/release/open-mpi/v4.0/openmpi-4.0.2.tar.gz
           tar -xvf ./openmpi-4.0.2.tar.gz
           cd openmpi-4.0.2
           ./configure --disable-mpi-fortran
           make -j4
      - name: Install OpenMPI
        run: |
           echo "Going to install ompi"
           cd ~
           cd openmpi-4.0.2
           sudo make install
           cd -
      - name: Update shared library cache
        if: ${{ startsWith(matrix.config.os, 'ubuntu') }}
        run: sudo ldconfig
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Check config
        run: |
          $CC --version
          $CXX --version
          python --version
          mpic++ --show
          mpicc --show
          echo $PYTHONPATH

      ##cibuildwheel setup
      - name: Build wheels Linux
        if: ${{ startsWith(matrix.config.os, 'ubuntu') }}
        uses: joerick/cibuildwheel@v1.9.0
        with:
          output-dir: dist
        env:
          CIBW_BEFORE_BUILD: python -m pip install numpy setuptools
          CIBW_BUILD: "cp3?-manylinux_x86_64"
          CIBW_SKIP: "cp35-*"
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014

      - name: Build wheels macos
        if: ${{ startsWith(matrix.config.os, 'macos') }}
        uses: joerick/cibuildwheel@v1.9.0
        with:
          output-dir: dist
        env:
          CIBW_BEFORE_BUILD: python -m pip install numpy setuptools
          CIBW_BUILD: "cp3?-macosx_x86_64"
          CIBW_SKIP: "cp35-*"

      - uses: actions/upload-artifact@v2
        with:
          path: dist/*.whl

      - name: Publish distribution ðŸ“¦ to Test PyPI
        if: github.ref == 'refs/heads/master'
        run: |
          pip install twine
          twine upload -r testpypi dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.ciwheeltest }}