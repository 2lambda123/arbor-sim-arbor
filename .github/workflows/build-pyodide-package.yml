name: Build Pyodide Arbor module

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # Main configuration variable
      # Should be kept up to date with the latest Pyodide
      # Although automatically selecting the latest version
      # might lead to breaking changes, so manual updating
      # is preferred for now
      # If you to use the exported arbor module,
      # you must use this exact Pyodide version or
      # annoying type errors will appear
      PYODIDE_VERSION: 0.22.0a3
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
        path: arbor_src
    - name: get-xbuildenv
      # The xbuildenv allows us to build Pyodide packages out-of-tree
      # i.e. without comping Pyodide from source. All important build
      # variables are stored in the Makefile.envs variable, and we also
      # use exported CPython headers
      run: |
        PYODIDE_RELEASE_URL: "https://github.com/pyodide/pyodide/releases/download"
        XBUILDENV_BASENAME=xbuildenv-${PYODIDE_VERSION}.tar.bz2
        wget -nc "${PYODIDE_RELEASE_URL}/${PYODIDE_VERSION}/${XBUILDENV_BASENAME}"
        tar -xvf ${XBUILDENV_BASENAME}
        rm ${XBUILDENV_BASENAME}
    - name: read-makefile
      # Here, we read out all Pyodide xbuildend environment variables.
      # This contains the entire environment and some extra stuff in
      # K=V form (like a normal `env` invocation). We filter out
      # all PYthon related variables and put these in the worker environment
      run: |
        make -f xbuildenv/pyodide-root/Makefile.envs .output_vars | grep 'PY' | tee -a $GITHUB_ENV
    - name: get-emsdk
      # When we compile arbor, we *must* match the emscripten version to
      # the one used when building Pyodide, as (among other), this determines
      # the libc API. A wrong emscripten version leads to (or at least when
      # I did that) type errors. The emsdk allows us to select a specific
      # emscripten version
      run: |
        wget https://github.com/emscripten-core/emsdk/archive/refs/heads/main.zip
        unzip main.zip
        rm main.zip
    - name: setup-emsdk
      # Here, we read out the emscripten version of Pyodide and install
      # that version using emsdk. To actually use these, we need to tell
      # cmake where the toolchain file is or from a shell script
      # you need to source the activation script. This needs to be done
      # for each gh worker separately
      run: |
        ./emsdk-main/emsdk install ${{env.PYODIDE_EMSCRIPTEN_VERSION}}
        ./emsdk-main/emsdk activate ${{env.PYODIDE_EMSCRIPTEN_VERSION}}
    - name: build-modcc-host
      # Our first build builds just arbor modcc in the native
      # binary format. By default an arbor build would compile
      # modcc, then call modcc to convert builtin nmodl files
      # and then compile those using the toolchain.
      # Because out goal is to (cross-)compile arbor with the
      # emscripten toolchain, we would generate an modcc as
      # js/wasm file which doesn't fit in the build process.
      # To be able to use modcc without much trouble, we
      # must compile it as a native binary
      run: |
        mkdir -p arbor_src/build_modcc_host
        cd arbor_src/build_modcc_host
        cmake .. -DARB_USE_BUNDLED_LIBS=ON
        make modcc -j 2
    - name: build-libarbor-emscripten
      # Here we instruct CMake/make to build the arbor static
      # libraries (libarbor*.a) using the emscripten toolchain.
      # As such, we must point to towards our previously build
      # modcc binary.
      run: |
        ABS_TOOLCHAIN=$(realpath emsdk-main/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake)
        ABS_MODCC=$(realpath arbor_src/build_modcc_host/bin/modcc)
        sed -i.bak -E \
            '/only been tested|nonexistent_file|unbalanced brace/d' \
            arbor_src/ext/random123/include/Random123/features/gccfeatures.h
        mkdir -p arbor_src/build_arborlib_em
        cd arbor_src/build_arborlib_em
        cmake .. \
            --toolchain "${ABS_TOOLCHAIN}" \
            -DCMAKE_INSTALL_PREFIX=$(realpath prefix) \
            -DARB_USE_BUNDLED_LIBS=ON \
            -DARB_MODCC="${ABS_MODCC}" \
            -DARB_ARCH=generic
        make -j 2
        make install
    - name: build-arbor-python-so-emscripten
      # Finally, we can use emscripten to build the python module .so
      # file using the pybind11 binding files from the arbor source
      # code and the previously generated libarbor*.a files.
      # Ideally, this would happen automatically in the previous step,
      # but due to the large amount of extra command line flags
      # and targeting a non-standard platorm (eg no site-packages dir),
      # we call emscripten by hand. This will take a while.
      # Importantly, we must point the compiler to the cpython header
      # files that Pyodide uses. Then there are some flags that are
      # required for any Pyodide python module. Finally we set the
      # arbor config variables (PREFIX,BINARY,... etc..) to /dev/null.
      # These are not actually used unless one calls arbor-build-catalogue,
      # which is not possible in the browser anyway.
      run: |
        ABS_XBUILDENV_INCLUDE=$(realpath xbuildenv/pyodide-root${{ env.CPYTHONINSTALL }}/include/python${{ env.PYMAJOR }}.${{ env.PYMINOR }})
        ABS_EM_ARBOR=$(realpath arbor_src/build_arborlib_em/prefix)
        PY_VERSION_FLAT=${{ env.PYMAJOR }}${{ env.PYMINOR }}
        ARBOR_PYLIB_OUTPUT=arbor/_arbor.cpython-${PY_VERSION_FLAT}-wasm32-emscripten.so
        ABS_ARBOR_PYLIB_OUTPUT=$(pwd)/$ARBOR_PYLIB_OUTPUT
        source emsdk-main/emsdk_env.sh
        mkdir -p arbor arbor.dist-info
        mkdir -p arbor_src/build_python_lib_em
        cd arbor_src/build_python_lib_em
        time em++ \
            ../python/*.cpp \
            -I ../ext/pybind11/include/ \
            -I "${ABS_XBUILDENV_INCLUDE}" \
            -I "${ABS_EM_ARBOR}/include" \
            -std=c++20 \
            -I "${ABS_EM_ARBOR}/lib/libarbor*" \
            -o "${ABS_ARBOR_PYLIB_OUTPUT}" \
            -shared -fPIC \
            -s ALLOW_MEMORY_GROWTH=1 \
            -s FORCE_FILESYSTEM=1 \
            -s LINKABLE=1 \
            -s USE_SDL=0 \
            -s SIDE_MODULE=1 \
            -s MODULARIZE=1 \
            -s WASM_BIGINT=1 \
            '-DARB_PREFIX="/dev/null"' \
            '-DARB_BINARY="/dev/null"' \
            '-DARB_LIB="/dev/null"' \
            '-DARB_CXX_COMPILER="/dev/null"' \
            '-DARB_DATA="/dev/null"' \
            -g0 \
            -O2
    - name: build-python-wheel-emscripten
      # The last step wraps up everything into a wheel file
      # Sorry for the hardcodes __init__.py/WHEEL/METADATA files
      run: |
        cp -v arbor_src/VERSION arbor
        echo IyBUaGUgUHl0aG9uIHdyYXBwZXIgZ2VuZXJhdGVkIHVzaW5nIHB5YmluZDExIGlzIGEgY29tcGlsZWQgZHluYW1pYyBsaWJyYXJ5LAojIHdpdGggYSBuYW1lIGxpa2UgX2FyYm9yLmNweXRob24tMzgteDg2XzY0LWxpbnV4LWdudS5zbwojCiMgVGhlIGxpYnJhcnkgd2lsbCBiZSBpbnN0YWxsZWQgaW4gdGhlIHNhbWUgcGF0aCBhcyB0aGlzIGZpbGUsIHdoaWNoIHdpbGwgaW1wb3J0cwojIHRoZSBjb21waWxlZCBwYXJ0IG9mIHRoZSB3cmFwcGVyIGZyb20gdGhlIF9hcmJvciBuYW1lc3BhY2UuCgpmcm9tIC5fYXJib3IgaW1wb3J0ICogICMgbm9xYTogRjQwMwoKCiMgUGFyc2UgVkVSU0lPTiBmaWxlIGZvciB0aGUgQXJib3IgdmVyc2lvbiBzdHJpbmcuCmRlZiBnZXRfdmVyc2lvbigpOgogICAgaW1wb3J0IG9zCgogICAgaGVyZSA9IG9zLnBhdGguYWJzcGF0aChvcy5wYXRoLmRpcm5hbWUoX19maWxlX18pKQogICAgd2l0aCBvcGVuKG9zLnBhdGguam9pbihoZXJlLCAiVkVSU0lPTiIpKSBhcyB2ZXJzaW9uX2ZpbGU6CiAgICAgICAgcmV0dXJuIHZlcnNpb25fZmlsZS5yZWFkKCkuc3RyaXAoKQoKCl9fdmVyc2lvbl9fID0gZ2V0X3ZlcnNpb24oKQpfX2NvbmZpZ19fID0gY29uZmlnKCkgICMgbm9xYTpGNDA1CgojIFJlbW92ZSBnZXRfdmVyc2lvbiBmcm9tIGFyYm9yIG1vZHVsZS4KZGVsIGdldF92ZXJzaW9uCg== \
          base64 -d > arbor/__init__.py
        echo V2hlZWwtVmVyc2lvbjogMS4wCkdlbmVyYXRvcjogbWFudWFsIDEuMApSb290LUlzLVB1cmVsaWI6IGZhbHNlClRhZzogcHkzLW5vbmUtYW55Cg== \
          base64 -d > arbor.dist-info/WHEEL
        echo TWV0YWRhdGEtVmVyc2lvbjogMi4xCk5hbWU6IGFyYm9yClZlcnNpb246IEFSQk9SX1ZFUlNJT04KU3VtbWFyeTogSGlnaCBwZXJmb3JtYW5jZSBzaW11bGF0aW9uIG9mIG5ldHdvcmtzIG9mIG11bHRpY29tcGFydG1lbnQgbmV1cm9ucy4KQXV0aG9yLWVtYWlsOiBBcmJvciBEZXYgVGVhbSA8Y29udGFjdEBhcmJvci1zaW0ub3JnPgpNYWludGFpbmVyLWVtYWlsOiBBcmJvciBEZXYgVGVhbSA8Y29udGFjdEBhcmJvci1zaW0ub3JnPgpMaWNlbnNlOiBDb3B5cmlnaHQgMjAxNi0yMDIwIEVpZGdlbsO2c3Npc2NoZSBUZWNobmlzY2hlIEhvY2hzY2h1bGUgWsO8cmljaCBhbmQgRm9yc2NodW5nc3plbnRydW0gSsO8bGljaCBHbWJILgoKICAgICAgICBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6CgogICAgICAgIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci4KCiAgICAgICAgMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLgoKICAgICAgICAzLiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBjb3B5cmlnaHQgaG9sZGVyIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9ycyBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uCgogICAgICAgIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgIkFTIElTIiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuCgpQcm9qZWN0LVVSTDogaG9tZXBhZ2UsIGh0dHBzOi8vYXJib3Itc2ltLm9yZwpQcm9qZWN0LVVSTDogZG9jdW1lbnRhdGlvbiwgaHR0cHM6Ly9kb2NzLmFyYm9yLXNpbS5vcmcKUHJvamVjdC1VUkw6IHJlcG9zaXRvcnksIGh0dHBzOi8vZ2l0aHViLmNvbS9hcmJvci1zaW0vYXJib3IKUHJvamVjdC1VUkw6IGNoYW5nZWxvZywgaHR0cHM6Ly9naXRodWIuY29tL2FyYm9yLXNpbS9hcmJvci9yZWxlYXNlcwpLZXl3b3Jkczogc2ltdWxhdG9yLG5ldXJvc2NpZW5jZSxtb3JwaG9sb2dpY2FsIGRldGFpbCxIUEMsR1BVLEMrKwpDbGFzc2lmaWVyOiBEZXZlbG9wbWVudCBTdGF0dXMgOjogNSAtIFByb2R1Y3Rpb24vU3RhYmxlCkNsYXNzaWZpZXI6IEludGVuZGVkIEF1ZGllbmNlIDo6IFNjaWVuY2UvUmVzZWFyY2gKQ2xhc3NpZmllcjogTGljZW5zZSA6OiBPU0kgQXBwcm92ZWQgOjogQlNEIExpY2Vuc2UKQ2xhc3NpZmllcjogUHJvZ3JhbW1pbmcgTGFuZ3VhZ2UgOjogUHl0aG9uCkNsYXNzaWZpZXI6IFByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzLjcKQ2xhc3NpZmllcjogUHJvZ3JhbW1pbmcgTGFuZ3VhZ2UgOjogUHl0aG9uIDo6IDMuOApDbGFzc2lmaWVyOiBQcm9ncmFtbWluZyBMYW5ndWFnZSA6OiBQeXRob24gOjogMy45CkNsYXNzaWZpZXI6IFByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzLjEwCkNsYXNzaWZpZXI6IFByb2dyYW1taW5nIExhbmd1YWdlIDo6IEMrKwpSZXF1aXJlcy1QeXRob246ID49My43CkRlc2NyaXB0aW9uLUNvbnRlbnQtVHlwZTogdGV4dC94LXJzdApMaWNlbnNlLUZpbGU6IExJQ0VOU0UKUmVxdWlyZXMtRGlzdDogbnVtcHkKCkFyYm9yCj09PT09CgpUaGUgQXJib3IgUHl0aG9uIHBhY2thZ2UgaXMgYSB3cmFwcGVyIGFyb3VuZCB0aGUgaGlnaC1wZXJmb3JtYW5jZSBDKysKbGlicmFyeSBBcmJvciwgZm9yIGNvbnN0cnVjdGluZyBhbmQgcnVubmluZyBzaW11bGF0aW9ucwptdWx0aS1jb21wYXJ0bWVudCBuZXVyb24gbW9kZWxzLCBmcm9tIHNpbmdsZSBjZWxsIG1vZGVscyB0byBsYXJnZQpuZXR3b3Jrcy4KCkRvY3VtZW50YXRpb24gaXMgYXZhaWxhYmxlIG9ubGluZSBhdCBgUmVhZCB0aGUKRG9jcyA8aHR0cHM6Ly9kb2NzLmFyYm9yLXNpbS5vcmcvZW4vbGF0ZXN0L3B5dGhvbj5gX18uCgpgU3VibWl0IGEgdGlja2V0IDxodHRwczovL2dpdGh1Yi5jb20vYXJib3Itc2ltL2FyYm9yPmBfXyBpZiB5b3UgaGF2ZSBhbnkKcXVlc3Rpb25zIG9yIHdhbnQgaGVscC4K \
          base64 -d | sed "s/ARBOR_VERSION/$(cat arbor_src/VERSION)/" > arbor.dist-info/METADATA
        WHEEL_FILE="arbor-$(cat arbor_src/VERSION)-py${{ env.PYMAJOR }}-none-any.whl"
        echo "WHEEL_FILE=$WHEEL_FILE" | tee -a $GITHUB_ENV
        zip -r "${WHEEL_FILE}" arbor arbor.dist-info
    - name: save-python-wheel
      uses: actions/upload-artifact@v3
      with:
        name: Arbor Emscripten Wheel
        path: ${{ env.WHEEL_FILE }}
