#include "gtest.h"
#include "../test_util.hpp"

#include <cell.hpp>
#include <fvm_cell.hpp>

// compares results with those generated by nrn/ball_and_stick.py
TEST(synapses, add_to_cell)
{
    using namespace nest::mc;

    nest::mc::cell cell;

    // setup global state for the mechanisms
    nest::mc::mechanisms::setup_mechanism_helpers();

    // Soma with diameter 12.6157 um and HH channel
    auto soma = cell.add_soma(12.6157/2.0);
    soma->add_mechanism(hh_parameters());

    cell.add_synapse({0, 0.1});
    cell.add_synapse({1, 0.2});
    cell.add_synapse({0, 0.3});

    EXPECT_EQ(3u, cell.synapses().size());
    EXPECT_EQ(cell.synapses()[0].segment, 0);
    EXPECT_EQ(cell.synapses()[0].position, 0.1);
    EXPECT_EQ(cell.synapses()[1].segment, 1);
    EXPECT_EQ(cell.synapses()[1].position, 0.2);
    EXPECT_EQ(cell.synapses()[2].segment, 0);
    EXPECT_EQ(cell.synapses()[2].position, 0.3);
}

// compares results with those generated by nrn/ball_and_stick.py
TEST(synapses, basic_state)
{
    using namespace nest::mc;

    // setup global state for the mechanisms
    nest::mc::mechanisms::setup_mechanism_helpers();

    using synapse_type = mechanisms::ExpSyn::mechanism_ExpSyn<double, int>;
    auto num_syn = 4;
    synapse_type::index_type indexes(num_syn);
    synapse_type::vector_type voltage(num_syn, -65.0);
    synapse_type::vector_type current(num_syn,   1.0);
    auto mech = mechanisms::make_mechanism<synapse_type>( voltage, current, indexes );

    auto ptr = dynamic_cast<synapse_type*>(mech.get());

    // parameters initialized to default values
    for(auto e : ptr->e) {
        EXPECT_EQ(e, 0.);
    }
    for(auto tau : ptr->tau) {
        EXPECT_EQ(tau, 2.0);
    }

    // current and voltage vectors correctly hooked up
    for(auto v : ptr->vec_v_) {
        EXPECT_EQ(v, -65.);
    }
    for(auto i : ptr->vec_i_) {
        EXPECT_EQ(i, 1.0);
    }

    // should be initialized to NaN
    for(auto g : ptr->g) {
        EXPECT_NE(g, g);
    }

    // initialize state then check g has been set to zero
    ptr->nrn_init();
    for(auto g : ptr->g) {
        EXPECT_EQ(g, 0.);
    }

    // call net_receive on two of the synapses
    ptr->net_receive(1, 3.14);
    ptr->net_receive(3, 1.04);
    EXPECT_EQ(ptr->g[1], 3.14);
    EXPECT_EQ(ptr->g[3], 1.04);
}
